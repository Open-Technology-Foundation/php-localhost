#!/bin/bash
set -eEuo pipefail
shopt -s extglob
readonly -- PRG0=$(readlink -en -- "$0")
readonly -- PRGDIR=$(dirname -- "$PRG0")
readonly -- PRG=$(basename -- "$PRG0")
readonly -- BUILD=429
readonly -- VERSION=1.0."$BUILD"
declare -i PORT=0          # Default port to use for PHP server; PORT=0 means get random port (within range MINPORT-MAXPORT)
declare -i MINPORT=8100 MAXPORT=8999 # Validation range of allowed ports (for randomised)
declare -- DIRECTORY=''    # Default directory to serve (will fallback to .)
declare -- MODE=fg         # Default mode: fg (foreground), bg (background), screen
declare -i VERBOSE=1       # Verbose output by default
declare -a SERVER_PIDS=()  # Array to track PHP server processes for cleanup
declare -- WAIT=0.5
declare -i EXECUTE=0


# Utility functions
text() { ((VERBOSE)) && echo "$PRG": "$*" || true; }  # Verbose echo (respects quiet mode)
error() { >&2 echo "$PRG": error: "$*"; }  # Error message to stderr
die() { error "${2:-}"; exit "${1:-1}"; }  # Print error and exit with code

# Error trap and cleanup function
cleanup() {
  local -i exit_code=$?
  local -- pid
  # Only clean up if we're in foreground mode or trap was triggered due to error
  if [[ $MODE == fg ]] || ((exit_code)); then
    for pid in "${SERVER_PIDS[@]}"; do
      if kill -0 "$pid" 2>/dev/null; then
        text "Stopping PHP server (PID: $pid)"
        kill "$pid" 2>/dev/null || true
      fi
    done
  elif ((EXECUTE)); then
    execstr=$(get_browser) || die 1 "No Browser found"
    exec "$execstr" http://localhost:"$PORT"/
  fi
  exit $exit_code
}
# Set up traps for clean exit
trap cleanup EXIT INT TERM

# Check for required dependencies
check_dependencies() {
  local -a missing=()
  # Check for PHP
  command -v php >/dev/null 2>&1 || missing+=("php")
  # Check for lsof (for process detection)
  command -v lsof >/dev/null 2>&1 || missing+=("lsof")
  # Check for nc (for port checking)
  command -v nc >/dev/null 2>&1 || missing+=("netcat")
  # If we're using screen mode, check for screen
  [[ "$MODE" == screen ]] && { command -v screen >/dev/null 2>&1 || missing+=("screen"); }
  # If we have missing dependencies, report and exit
  if ((${#missing[@]})); then
    error "Missing required dependencies: ${missing[*]}"
    error "Please install the missing packages and try again."
    exit 1
  fi
  # Validate PHP version
  local php_version
  php_version=$(php -r 'echo PHP_VERSION;')
  [[ -z "$php_version" ]] && die 1 "Could not determine PHP version"
  text "Using PHP version $php_version"
  return 0
}

get_browser() {
  local browser=""
  # Check if we're in a GUI environment
  if [[ -n "$DISPLAY" ]] || [[ -n "$WAYLAND_DISPLAY" ]]; then
    while ((1)); do
      # Try xdg-settings first (most reliable in modern systems)
      if command -v xdg-settings &>/dev/null; then
        browser_desktop=$(xdg-settings get default-web-browser 2>/dev/null)
        if [[ -n "$browser_desktop" ]]; then
          # Extract the actual browser command from the .desktop file
          desktop_file=$(find /usr/share/applications /usr/local/share/applications ~/.local/share/applications -name "$browser_desktop" 2>/dev/null | head -1)
          if [[ -n "$desktop_file" ]]; then
            browser=$(grep "^Exec=" "$desktop_file" | sed 's/^Exec=//' | sed 's/%[uUfF]//' | awk '{print $1}' |head -n1)
            [[ -n $browser ]] && break
          fi
        fi
      fi

      # If xdg-settings failed, try xdg-mime
      if [[ -z "$browser" ]] && command -v xdg-mime &>/dev/null; then
        browser_desktop=$(xdg-mime query default x-scheme-handler/http 2>/dev/null)
        if [[ -n "$browser_desktop" ]]; then
          desktop_file=$(find /usr/share/applications /usr/local/share/applications ~/.local/share/applications -name "$browser_desktop" 2>/dev/null | head -1)
          if [[ -n "$desktop_file" ]]; then
            browser=$(grep "^Exec=" "$desktop_file" | sed 's/^Exec=//' | sed 's/%[uUfF]//' | awk '{print $1}' |head -n1)
            [[ -n $browser ]] && break
         fi
        fi
      fi

      # If still no browser, check alternatives system
      if [[ -z "$browser" ]] && command -v update-alternatives &>/dev/null; then
        browser=$(update-alternatives --query x-www-browser 2>/dev/null | grep "Value:" | awk '{print $2}' |head -n1)
        [[ -n $browser ]] && break
      fi

      # Check environment variable as last resort for GUI
      if [[ -z "$browser" ]] && [[ -n "$BROWSER" ]]; then
        browser="$BROWSER"
        [[ -n $browser ]] && break
      fi

      # Common GUI browsers to try if all else fails
      if [[ -z "$browser" ]]; then
        for b in firefox chromium-browser google-chrome brave-browser opera epiphany-browser konqueror; do
          if command -v "$b" &>/dev/null; then
            browser="$b"
            break 2
          fi
        done
      fi

      break
    done
  else
    # We're in a terminal environment
    # Check if BROWSER env var points to a terminal browser
    if [[ -n "$BROWSER" ]]; then
      for term_browser in w3m lynx elinks links; do
        if [[ "$BROWSER" == *"$term_browser"* ]] && command -v "$term_browser" &>/dev/null; then
          browser="$term_browser"
          break
        fi
      done
    fi
    # If BROWSER didn't work, try common terminal browsers
    if [[ -z "$browser" ]]; then
      for b in w3m lynx elinks links; do
        if command -v "$b" &>/dev/null; then
          browser="$b"
          break
        fi
      done
    fi
  fi

  # If we still don't have a browser, report error
  if [[ -z "$browser" ]]; then
     >&2 echo "${FUNCNAME:-}: Error: No web browser found on this system."
    echo ''
    return 1
  fi

  echo "$browser"
  return 0
}


usage() {
  cat <<EOT
$PRG $VERSION - PHP development server launcher

Usage: $PRG [-q|--quiet] [-v|--verbose] [-V|--version] [-h|--help] 
       [-p|--port PORT] [-d|--directory DIR] [-i|--minport MIN] [-a|--maxport MAX]
       [--fg|--bg|--screen] [-x|--execute] [port] [dir] [mode]

Arguments can be in any order.

Parameters:
    port    - Port number to use (default: auto-assign from port range)
    dir     - Directory to serve (auto-detects html/public/www/etc. folders)
    mode    - Server run mode (default: $MODE)
                fg     - Run in foreground
                bg     - Run in background
                screen - Run in screen session

Options:
    -p, --port PORT       Specify port number (0 = auto-assign from port range)
    -d, --directory DIR   Specify directory to serve
    -i, --minport MIN     Set minimum port range for auto-assignment
    -a, --maxport MAX     Set maximum port range for auto-assignment
    --fg                  Run in foreground mode
    --bg                  Run in background mode
    --screen              Run in screen session
    -x, --execute         Open URL in browser when server starts
    -q, --quiet           Suppress output and auto-kill
                          existing servers on the same port
    -v, --verbose         Show verbose output (default)
    -V, --version         Display version information
    -h, --help            Display this help message

Management:
    Use 'php-localhost-screens' to manage running PHP server instances

Features:
  - Auto-selects random available port from range $MINPORT-$MAXPORT if none specified
  - Auto-detects common web directories (html, public, www, etc.)
  - Auto-detects and manages PHP servers on same port
  - Supports running in foreground, background, or screen session
  - Auto-uses router.php if present in the served directory
  - Opens browser upon server start with -x flag
  - Validates port numbers and checks for availability
  - Validates dependencies (php, lsof, nc, screen)
  - Provides clean shutdown with signal trapping

Examples:
    # Auto-detect port and directory, run in foreground
    $PRG

    # Run on port 8001 serving html/ in background
    $PRG 8001 html bg

    # Set custom port range (1024-2048) and auto-select
    $PRG -i 1024 -a 2048

    # Serve current directory on port 8086
    $PRG . 8086

    # Screen session on port 8087 serving public/
    $PRG screen 8087 public

    # Quiet mode, auto-kill existing servers on port 8080
    $PRG -q 8080 .

    # Run in background with auto-port and open browser
    $PRG --bg -x

EOT
  exit "${1:-1}"
}

# Validate port number
validate_port() {
  local -i p="$1"
  # Check if port is a valid number
  [[ "$p" =~ ^[0-9]+$ ]] || die 22 "Invalid port number: $1 (must be a number)"
  # Check port range
  if ((p < MINPORT || p > MAXPORT)); then
    >&2 text "warning: Port $p is outside the recommended range ($MINPORT-$MAXPORT)"
    ((p < 1024)) && >&2 text "warning: Ports below 1024 typically require root privileges"
  fi
  return 0
}

port_range() {
  if (($#)); then
    local -i min=$1 max=$2
    [[ "$min" =~ ^[0-9]+$ ]] || die 22 "Invalid port number: $min (must be a number)"
    [[ "$max" =~ ^[0-9]+$ ]] || die 22 "Invalid port number: $max (must be a number)"
    ((min > max)) && { min=$2; max=$1; }
    ((max > 65535)) && max=65535
    ((min < 1024)) && min=1024
    MINPORT=$min
    MAXPORT=$max
  else
    echo -n "$MINPORT-$MAXPORT"
  fi
}

find_available_port() {
  local port
  while ((1)); do
    # Generate a random port within the specified range
    port=$(shuf -i "$(port_range)" -n 1)
    # Check if the port is available
    if ! ss -tuln | grep -q ":$port "; then
      echo "$port"
      return 0
    else
      >&2 echo "$FUNCNAME: Port $port is in use, trying another..."
    fi
  done
}


# Process command line arguments ---------------------------------
# shellcheck disable=SC2206
while (($#)); do case $1 in
  -p|--port)      shift
                  validate_port "${1:-"$PORT"}"
                  PORT=${1:-"$PORT"}
                  ;;
  +([0-9]))       validate_port "$1"; PORT=$1 ;;
  --bg|--fg|--screen)
                  MODE=${1:2} ;;
  -d|--directory) [[ -n $DIRECTORY ]] && die 1 "Directory '$DIRECTORY' was previously defined."
                  shift; DIRECTORY=${1:-} ;;
  -i|--minport)   shift; MINPORT=${1:- 1024} ;;
  -a|--maxport)   shift; MAXPORT=${1:- 65535} ;;

  -x|--execute)   EXECUTE=1 ;;
  -v|--verbose)   VERBOSE=1 ;;
  -q|--quiet)     VERBOSE=0 ;; # Suppresses output and auto-kills existing servers
  -V|--version)   echo "$PRG $VERSION"; exit 0 ;;
  -h|--help)      usage 0 ;;
  -[pdvqVh]*) #shellcheck disable=SC2046 # expand aggregated short options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}" ;;
  -*)             die 22 "Bad argument '$1'" ;;
  bg|fg|screen)   MODE=$1 ;;
  *)              [[ -n $DIRECTORY ]] && die 1 "Directory '$DIRECTORY' was previously defined."
                  DIRECTORY="${1:-}"
                  ;;
esac; shift; done

# set port ranges
port_range "$MINPORT" "$MAXPORT"

# PORT flag == 0 means get rando
((PORT)) || PORT=$(find_available_port)

if [[ -z $DIRECTORY ]]; then
  for htmldir in public_html html www httpdocs htdocs webroot public web wwwroot; do
    [[ -d "$htmldir" ]] && { DIRECTORY="$htmldir"; break; }
  done
  [[ -z $DIRECTORY ]] && DIRECTORY='.'
fi

# Verify directory exists
[[ -d "$DIRECTORY" ]] || die 2 "Directory '$DIRECTORY' does not exist"
DIRECTORY=$(readlink -en -- "$DIRECTORY") || die 2 "Failed to resolve directory path"

# Check dependencies after processing arguments (needed for mode variable)
check_dependencies

# Check if PORT is already in use
if nc -z localhost "$PORT" 2>/dev/null; then
  text "Port $PORT is already in use"
  # Find PHP processes using this port
  declare -a pids=()
  mapfile -t pids < <(lsof -i :"$PORT" -t 2>/dev/null | xargs -r ps -o pid= -o cmd= -p | grep "php -S localhost:$PORT" | awk '{print $1}')
  if [[ ${#pids[@]} -gt 0 ]]; then
    text "Found PHP server processes using port $PORT:"
    for pid in "${pids[@]}"; do
      text "  PID $pid: $(ps -p "$pid" -o cmd= 2>/dev/null || text 'Unknown process')"
    done
    ((VERBOSE)) && read -r -p "$PRG: Do you want to kill these processes? y/n " yn || yn=y
    [[ $yn == y ]] || die 1 'Aborted'
    for pid in "${pids[@]}"; do
      kill "$pid" 2>/dev/null && text "Killed process $pid" || text "Failed to kill process $pid"
    done
    # Wait a moment for processes to terminate
    sleep "$WAIT"
    # Check if port is still in use
    nc -z localhost "$PORT" 2>/dev/null \
        && die 1 "Port $PORT is still in use. Please try a different port."
    text "Port $PORT is now available"
  else
    exit 1
  fi
fi

# Function to start PHP server
start_php_server() {
  text "localhost:$PORT for $DIRECTORY"

  # Create router file if it doesn't exist
  local router_file="${DIRECTORY}/router.php"
  [[ -f "$router_file" ]] || text "No router file found. Using default PHP server routing."
  
  # Command to run
  local php_cmd=("php" "-S" "localhost:${PORT}" "-t" "${DIRECTORY}/")
  
  # Add router file if it exists
  [[ -f "$router_file" ]] && php_cmd+=("$router_file")
  
  case "$MODE" in
    bg)
      # Run in background
      text "Starting PHP server in background"
      "${php_cmd[@]}" > /dev/null 2>&1 &
      local server_pid=$!
      SERVER_PIDS+=("$server_pid")
      # Verify server started correctly
      sleep "$WAIT"
      kill -0 "$server_pid" 2>/dev/null || die 1 "PHP server failed to start. Check for errors."
      text "Server started with PID $server_pid"
      text "To stop it, run: kill $server_pid"
      text "$PRG will now exit, but the PHP server will continue running in the background."
      text http://localhost:"$PORT"/
      exit 0
      ;;
    screen)
      # Create a detached screen session
      text "Starting PHP server in screen session named 'localhost-$PORT'"
      text "Use 'screen -r localhost-$PORT' to reattach to the server"
      text "Use Ctrl+A followed by D to detach from screen"
      # Create screen session
      screen -dmS localhost-"$PORT" "${php_cmd[@]}"
      # Verify screen session exists
      sleep "$WAIT"
      screen -list | grep -q localhost-"$PORT" || die 1 "Failed to create screen session. Check for errors."
      text "$PRG will now exit, but the PHP server will continue running in screen."
      text http://localhost:"$PORT"/
      exit 0
      ;;
    *)
      EXECUTE=0 # not valid in this mode
      # Default: run in foreground (script will not exit until server is stopped)
      text "Starting PHP server in foreground. Press Ctrl+C to stop."
      text http://localhost:"$PORT"/
      # Execute PHP server in foreground
      "${php_cmd[@]}"
      ;;
  esac
}

# Start the PHP server
start_php_server

#fin
